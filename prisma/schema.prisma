// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  sizes         Size[]
  customLink    String?   @unique // Lien personnalisé pour partager (mataille.com/username ou custom)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  category  Category
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sizes     Size[]
  isCustom  Boolean  @default(false) // Pour marquer si c'est une marque ajoutée par un utilisateur
}

model Size {
  id        String   @id @default(cuid())
  userId    String
  brandId   String?
  category  Category
  value     String   // La valeur de la taille (ex: "42", "XL", "38")
  notes     String?  // Notes supplémentaires concernant cette taille
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand     Brand?   @relation(fields: [brandId], references: [id])

  @@unique([userId, brandId, category])
}

enum Category {
  SHOES       // Chaussures
  CLOTHING    // Vêtements (général)
  PANTS       // Pantalons
  SHIRTS      // Chemises
  DRESSES     // Robes
  JACKETS     // Vestes/Manteaux
  UNDERWEAR   // Sous-vêtements
  HATS        // Chapeaux/Casquettes
  GLOVES      // Gants
  SOCKS       // Chaussettes
  WATCHES     // Montres
  RINGS       // Bagues
  BRACELETS   // Bracelets
  NECKLACES   // Colliers
  OTHER       // Autres
}